# -*- coding: utf-8 -*-
"""option_strat_reco.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QyUEbCa3jRRnL6tLHJuRXz47fUkWjSgo
"""

# ================================
# 📈 Derivatives Strategy Recommender - Proof of Concept
# ================================

import yfinance as yf
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
import streamlit as st

# 1️⃣ Download 5 years of SPX, NDY, RTY, VIX
tickers = ['^GSPC', '^NDX', '^RUT', '^VIX']
data = yf.download(tickers, period='5y')['Close']

# 2️⃣ Calculate basic indicators
data['SPX_ret'] = data['^GSPC'].pct_change()
data['NDX_ret'] = data['^NDX'].pct_change()
data['RTY_ret'] = data['^RUT'].pct_change()
data['VIX_chg'] = data['^VIX'].pct_change()
data['VIX_level'] = data['^VIX']

# 3️⃣ Dummy sentiment indicator — simple: +1 if SPX return > 0.2%, else -1
data['sentiment'] = np.where(data['SPX_ret'] > 0.002, 1, -1)

# 4️⃣ Label the best strategy by some toy logic:
# Example: high vol → iron condor; low vol → straddle; uptrend → strangle; downtrend → butterfly
conditions = [
    (data['VIX_level'] > 20) & (data['sentiment'] == 1),
    (data['VIX_level'] > 20) & (data['sentiment'] == -1),
    (data['VIX_level'] <= 20) & (data['sentiment'] == 1),
    (data['VIX_level'] <= 20) & (data['sentiment'] == -1),
]

strategies = ['IronCondor', 'Butterfly', 'Straddle', 'Strangle']
data['strategy'] = np.select(conditions, strategies, default='None')

# 5️⃣ Drop NaNs
data = data.dropna()

# 6️⃣ Features and Target
features = ['SPX_ret', 'NDX_ret', 'RTY_ret', 'VIX_chg', 'VIX_level', 'sentiment']
X = data[features]
y = data['strategy']

# 7️⃣ Split Train/Test
train_size = int(0.8 * len(data))
X_train, X_test = X.iloc[:train_size], X.iloc[train_size:]
y_train, y_test = y.iloc[:train_size], y.iloc[train_size:]

# 8️⃣ Random Forest Classifier
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# 9️⃣ Evaluate
y_pred = clf.predict(X_test)
report = classification_report(y_test, y_pred, output_dict=True)

# ============================
# STREAMLIT DASHBOARD
# ============================

st.title("📊 Derivatives Strategy Recommender AI")

st.subheader("Market Data Snapshot (SPX, NDX, RTY, VIX)")
st.line_chart(data[['^GSPC', '^NDX', '^RUT', '^VIX']])

st.subheader("Model Backtest Classification Report")
st.json(report)

st.subheader("Sample of Predicted Strategies")
results = X_test.copy()
results['True_Strategy'] = y_test
results['Predicted_Strategy'] = y_pred
st.dataframe(results.tail(20))

st.subheader("Try It Yourself 🧪")

spx_ret = st.slider('SPX Daily Return (%)', -5.0, 5.0, 0.0) / 100
ndx_ret = st.slider('NDX Daily Return (%)', -5.0, 5.0, 0.0) / 100
rty_ret = st.slider('RTY Daily Return (%)', -5.0, 5.0, 0.0) / 100
vix_level = st.slider('VIX Level', 10, 50, 20)
vix_chg = st.slider('VIX Daily Change (%)', -20.0, 20.0, 0.0) / 100
sentiment = st.selectbox('Macro Sentiment', [-1, 1])

new_X = np.array([[spx_ret, ndx_ret, rty_ret, vix_chg, vix_level, sentiment]])
prediction = clf.predict(new_X)[0]

st.success(f"👉 Recommended Strategy: **{prediction}**")

st.markdown(
"""
**Example Mapping**
- High vol + positive sentiment → Iron Condor
- High vol + negative sentiment → Butterfly
- Low vol + bullish → Straddle
- Low vol + bearish → Strangle
"""
)

st.caption("This is a prototype. Do your own due diligence!")

